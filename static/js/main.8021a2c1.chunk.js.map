{"version":3,"sources":["components/TodoItem.module.css","components/TodoItem.js","components/TodosList.js","components/Header.js","components/InputTodo.js","pages/SinglePage.js","pages/About.js","pages/NotMatch.js","components/Navbar.js","components/TodoContainer.js","index.js"],"names":["module","exports","TodoItem","props","useState","editing","setEditingfunc","useEffect","console","log","todo","completed","id","title","viewMode","editMode","display","className","styles","item","onDoubleClick","style","checkbox","type","checked","onChange","handleChangeProps","onClick","deleteTodoProps","fontStyle","color","opacity","textDecoration","textInput","value","e","setUpdate","target","onKeyDown","event","key","TodosList","todos","map","Header","version","React","padding","lineHeight","fontSize","fontWeight","marginBottom","textTransform","textAlign","InputTodo","inputText","setInputText","onSubmit","preventDefault","trim","addTodoProps","alert","placeholder","name","SinglePage","slug","useParams","aboutContent","description","find","About","useLocation","pathname","to","path","element","NotMatch","Navbar","navbarOpen","setNavbarOpen","prev","width","height","text","link","isActive","TodoContainer","temp","localStorage","getItem","JSON","parse","getInitialTodos","setTodos","stringify","setItem","exact","newTodo","uuidv4","prevState","filter","updatedTitle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8021a2c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"TodoItem_item__l0XCj\",\"checkbox\":\"TodoItem_checkbox__3YPeK\",\"textInput\":\"TodoItem_textInput__1rqzD\"};","import React from \"react\"\r\nimport { useState, useEffect } from \"react/cjs/react.development\"\r\nimport styles from \"./TodoItem.module.css\"\r\nimport {FaTrash} from \"react-icons/fa\"\r\n\r\nconst TodoItem=props=>\r\n{\r\n    const [editing, setEditingfunc]=useState(false)\r\n\r\n    // automatically called upon deleting\r\n    useEffect(()=>\r\n    {\r\n        return()=>\r\n        {\r\n            console.log(\"cleaning up\")\r\n        }\r\n    }, [])\r\n\r\n    const handleEditing=()=>\r\n    {\r\n        setEditingfunc(true)\r\n    }\r\n\r\n    const handleUpdatedDone=(event)=>\r\n    {\r\n        if(event.key===\"Enter\") setEditingfunc(false)\r\n    }\r\n\r\n    const completedStyle = \r\n    {\r\n        fontStyle: \"italic\",\r\n        color: \"#595959\",\r\n        opacity: 0.4,\r\n        textDecoration: \"line-through\",\r\n    }\r\n\r\n    /* This is a shorthand called destructuring to use shorter names. Without this I'd have to type below\r\n    props.todo.id, or props.todo.completed, or props.todo.title */\r\n    const{completed, id, title}=props.todo\r\n\r\n    let viewMode={}\r\n    let editMode={}\r\n\r\n    if(editing) viewMode.display=\"none\"\r\n    else editMode.display=\"none\"\r\n\r\n    return(<li className={styles.item}>\r\n        <div onDoubleClick={handleEditing} style={viewMode}>\r\n            <input \r\n                className={styles.checkbox}\r\n                type=\"checkbox\" \r\n                checked={completed}\r\n                onChange={()=>props.handleChangeProps(id)}\r\n                //onChange={()=>console.log(\"checkbox was clicked\")}\r\n            />\r\n            <button onClick={()=>props.deleteTodoProps(id)} className=\"deletebtn\"><FaTrash/></button>\r\n            <span style={completed?completedStyle:null}>{title}</span>\r\n        </div>\r\n        <input \r\n            type=\"text\" \r\n            className={styles.textInput} \r\n            style={editMode} \r\n            value={title} \r\n            //onChange={e=>{console.log(e.target.value, id)}}\r\n            onChange={e=>{props.setUpdate(e.target.value, id)}}\r\n            onKeyDown={handleUpdatedDone}\r\n        />\r\n        </li>);\r\n\r\n}/**'const todoItem=props=>' delimiter */\r\n\r\nexport default TodoItem\r\n\r\n\r\n\r\n\r\n// import React from \"react\"\r\n// import styles from \"./TodoItem.module.css\"\r\n\r\n// class TodoItem extends React.Component \r\n// {\r\n//     // object editing for all the items\r\n//     state=\r\n//     {\r\n//         editing:false,\r\n//     }\r\n\r\n//     handleEditing=()=>\r\n//     {\r\n//         console.log(\"edit activated\");\r\n\r\n//         this.setState({\r\n//             editing:true,\r\n//         })        \r\n//     }/* 'handleEditing=(e)=>' delimiter */\r\n\r\n//     handleUpdatedDone=(event)=>\r\n//     {\r\n//         console.log(event.key);\r\n\r\n//         if(event.key===\"Enter\") this.setState({editing:false}) \r\n\r\n//     }/* 'handleUpdatedDone=(e)=>' delimiter */\r\n\r\n//     componentWillUnmount()\r\n//     {\r\n//         console.log(\"item has been deleted\")\r\n//     }\r\n\r\n\r\n//   render(){\r\n//     const completedStyle = \r\n//     {\r\n//         fontStyle: \"italic\",\r\n//         color: \"#595959\",\r\n//         opacity: 0.4,\r\n//         textDecoration: \"line-through\",\r\n//     }\r\n\r\n//     let viewMode={}\r\n//     let editMode={}\r\n\r\n//     if(this.state.editing) viewMode.display=\"none\"\r\n//     else editMode.display=\"none\"\r\n    \r\n//     /* This is a shorthand called destructuring to use shorter names. Without this I'd have to type below\r\n//     props.todo.id, or props.todo.completed, or props.todo.title */\r\n//     const{completed, id, title}=this.props.todo\r\n\r\n//     return(<li className={styles.item}>\r\n//         <div onDoubleClick={this.handleEditing} style={viewMode}>\r\n//             <input \r\n//                 className={styles.checkbox}\r\n//                 type=\"checkbox\" \r\n//                 checked={completed}\r\n//                 onChange={()=>this.props.handleChangeProps(id)}\r\n//                 //onChange={()=>console.log(\"checkbox was clicked\")}\r\n//             />\r\n//             <button onClick={()=>this.props.deleteTodoProps(id)}>Delete</button>\r\n//             <span style={completed?completedStyle:null}>{title}</span>\r\n//         </div>\r\n//         <input \r\n//             type=\"text\" \r\n//             className={styles.textInput} \r\n//             style={editMode} \r\n//             value={title} \r\n//             //onChange={e=>{console.log(e.target.value, id)}}\r\n//             onChange={e=>{this.props.setUpdate(e.target.value, id)}}\r\n//             onKeyDown={this.handleUpdatedDone}\r\n//         />\r\n//         </li>);\r\n        \r\n//   }// render\r\n// }\r\n\r\n// export default TodoItem\r\n\r\n\r\n\r\n\r\n/* I did below as a function and it works pretty well however functions can't handle the setstate event handler so I\r\nhad to do it over as a class above */\r\n\r\n\r\n// import React, {setState} from 'react'\r\n// import styles from \"./TodoItem.module.css\"\r\n\r\n// function TodoItem(props)\r\n// {\r\n//     const completedStyle = \r\n//     {\r\n//         fontStyle: \"italic\",\r\n//         color: \"#595959\",\r\n//         opacity: 0.4,\r\n//         textDecoration: \"line-through\",\r\n//     }\r\n\r\n//     const state=\r\n//     {\r\n//         editing:false,\r\n//     }\r\n\r\n\r\n//     let viewMode={}\r\n//     let editMode={}\r\n\r\n//     const handleEditing=(e)=>\r\n//     {e.preventDefault()\r\n//         console.log(\"edit activated\");\r\n//         setState({\r\n//             editing:true,\r\n//         })\r\n        \r\n//     }\r\n\r\n    \r\n\r\n//     if(state.editing) viewMode.display=\"none\"\r\n//     else editMode.display=\"none\"\r\n\r\n//     /* This is a shorthand called destructuring to use shorter names. Without this I'd have to type below\r\n//     props.todo.id, or props.todo.completed, or props.todo.title */\r\n//     const{completed, id, title}=props.todo\r\n//     return(<li className={styles.item}>\r\n//         <div onDoubleClick={handleEditing} style={viewMode}>\r\n//             <input \r\n//                 className={styles.checkbox}\r\n//                 type=\"checkbox\" \r\n//                 checked={completed}\r\n//                 onChange={()=>props.handleChangeProps(id)}\r\n//             />\r\n//             <button onClick={()=>props.deleteTodoProps(id)}>Delete</button>\r\n//             <span style={completed?completedStyle:null}>{title}</span>\r\n//         </div>\r\n//         <input type=\"text\" className={styles.textInput} style={editMode} />\r\n//         </li>);    \r\n    \r\n// }\r\n\r\n// export default TodoItem","import React from 'react'\r\nimport TodoItem from './TodoItem';\r\n\r\nconst TodosList=props=>\r\n{\r\n    return(\r\n        <ul>\r\n            {props.todos.map(todo=>(<TodoItem \r\n                    key={todo.id} \r\n                    todo={todo} \r\n                    handleChangeProps={props.handleChangeProps}\r\n                    deleteTodoProps={props.deleteTodoProps}\r\n                    setUpdate={props.setUpdate} />\r\n                ))}\r\n        </ul>\r\n    )  \r\n    \r\n}/**'const TodosList=props=>' delimiter */\r\n\r\nexport default TodosList\r\n\r\n\r\n\r\n\r\n// import React from 'react'\r\n// import TodoItem from './TodoItem';\r\n\r\n// class TodosList extends React.Component\r\n// {\r\n//     render(){\r\n//         return(\r\n//             <ul>\r\n//                 {this.props.todos.map(todo=>(<TodoItem \r\n//                         key={todo.id} \r\n//                         todo={todo} \r\n//                         handleChangeProps={this.props.handleChangeProps}\r\n//                         deleteTodoProps={this.props.deleteTodoProps}\r\n//                         setUpdate={this.props.setUpdate} />\r\n//                     ))}\r\n//             </ul>\r\n//         );\r\n//     }/* 'render()' delimiter */\r\n    \r\n    \r\n// }\r\n\r\n// export default TodosList","import React from \"react\"\r\n\r\nconst Header=()=>\r\n{\r\n    const headerStyle=\r\n    {\r\n        padding: \"20px 0\",\r\n        lineHeight: \"1.5em\",\r\n    }\r\n\r\n    const version=React.version\r\n    return(\r\n        <header style={headerStyle}>\r\n            <h1\r\n            style={{\r\n                fontSize: \"6rem\",\r\n                fontWeight: \"600\",\r\n                marginBottom: \"2rem\",\r\n                lineHeight: \"1em\",\r\n                color: \"#ececec\",\r\n                textTransform: \"lowercase\",\r\n                textAlign: \"center\",\r\n              }}\r\n              >todos example headers</h1>\r\n              <h5>React version: {version}</h5>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {useState} from 'react'\r\nimport {FaPlusCircle} from \"react-icons/fa\"\r\n\r\n\r\nconst InputTodo=(props)=>\r\n{\r\n    //console.log(useState(\"hello\"))\r\n    \r\n    const[inputText, setInputText]=useState({title:\"\",})\r\n\r\n    const onChange=e=>\r\n    {\r\n        setInputText({\r\n            ...inputText,\r\n            [e.target.name]: e.target.value,\r\n        })\r\n    }\r\n\r\n    const handleSubmit=e=>\r\n    {\r\n        e.preventDefault();\r\n        if(inputText.title.trim())\r\n        {\r\n            props.addTodoProps(inputText.title);\r\n            setInputText({title:\"\",})            \r\n        }\r\n        else alert(\"please write item\");  \r\n    };\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit} className=\"form-container\">\r\n            <input type=\"text\" placeholder=\"Add todo...\" value={inputText.title}\r\n                name=\"title\"\r\n                onChange={onChange} className=\"input-text\"/>\r\n            <button className=\"input-submit\"><FaPlusCircle/></button>\r\n        </form>\r\n    );\r\n\r\n}/**'const InputTodo=(props)=>' delimiter */\r\n\r\n\r\nexport default InputTodo\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React, {useState} from 'react'\r\n\r\n// const InputTodo=(props)=>\r\n// {\r\n//     //console.log(useState(\"hello\"))\r\n    \r\n//     const[title, setTitle]=useState(\"\")\r\n\r\n//     const onChange=e=>\r\n//     {\r\n//         setTitle(e.target.value)\r\n//     }\r\n\r\n//     const handleSubmit=e=>\r\n//     {\r\n//         e.preventDefault();\r\n//         if(title.trim())\r\n//         {\r\n//             props.addTodoProps(title);\r\n//             setTitle(\"\")            \r\n//         }\r\n//         else alert(\"please write item\");  \r\n//     };\r\n\r\n//     return(\r\n//         <form onSubmit={handleSubmit} className=\"form-container\">\r\n//             <input type=\"text\" placeholder=\"Add todo...\" value={title}\r\n//                 name=\"title\"\r\n//                 onChange={onChange} className=\"input-text\"/>\r\n//             <button className=\"input-submit\">Submit</button>\r\n//         </form>\r\n//     );\r\n\r\n// }/**'const InputTodo=(props)=>' delimiter */\r\n\r\n\r\n// export default InputTodo\r\n\r\n\r\n\r\n\r\n\r\n\r\n// class InputTodo extends Component\r\n// {\r\n//     state=\r\n//     {\r\n//         title: \"\"\r\n//     };\r\n\r\n//     onChange=e=>\r\n//     {\r\n//         this.setState\r\n//         ({\r\n//             [e.target.name]:e.target.value,\r\n//         });\r\n//     };\r\n\r\n//     handleSubmit=e=>\r\n//     {\r\n//         e.preventDefault();\r\n//         if(this.state.title.trim())\r\n//         {\r\n//             this.props.addTodoProps(this.state.title);\r\n//             this.setState({\r\n//                 title:\"\"\r\n//             });\r\n            \r\n//         }\r\n//         else\r\n//         {\r\n//             alert(\"please write item\");\r\n//         }        \r\n//     };\r\n\r\n//     render(){\r\n//         return(\r\n//             <form onSubmit={this.handleSubmit} className=\"form-container\">\r\n//                 <input type=\"text\" placeholder=\"Add todo...\" value={this.state.title}\r\n//                     name=\"title\"\r\n//                     onChange={this.onChange} className=\"input-text\"/>\r\n//                 <button className=\"input-submit\">Submit</button>\r\n//             </form>\r\n//         );\r\n//     }/* 'render()' delimiter */\r\n    \r\n    \r\n// }\r\n\r\n// export default InputTodo","import React from \"react\"\r\nimport { useParams } from \"react-router-dom\"\r\n\r\nconst SinglePage = () => \r\n{\r\n    const aboutData = [\r\n        {\r\n          slug: \"about-app\",\r\n          title: \"About the App\",\r\n          description:\r\n            \"In this app, you can add, delete, submit and edit items. To edit items, simply double click on it. Once you are done, press the enter key to resubmit. This app will persist your data in the browser local storage. So whether you reload, close your app or reopened it, you still have access to your to-dos items.\",\r\n        },\r\n        {\r\n          slug: \"about-author\",\r\n          title: \"About the Author\",\r\n          description:\r\n            \"This app was developed by Ibas Majid, a self-taught web developer and a technical writer. He is opened to freelance Gig. So go ahead and connect with ibas on Twitter @ibaslogic.\",\r\n        },\r\n      ]\r\n\r\n      const { slug } = useParams()\r\n      const aboutContent = aboutData.find(item => item.slug === slug)\r\n      const { title, description } = aboutContent\r\n\r\n    console.log(useParams())\r\n    return (\r\n        <div className=\"main__content\">\r\n          <h1>{title}</h1>\r\n          <p>{description}</p>\r\n        </div>\r\n      )\r\n\r\n}/** */\r\nexport default SinglePage","import react from \"react\";\r\nimport { Link, Route, Routes, useLocation } from \"react-router-dom\";\r\nimport SinglePage from \"./SinglePage\"\r\n\r\nconst About=(props)=>\r\n{\r\n    const path=useLocation().pathname\r\n\r\n    console.log()\r\n    return(\r\n        <div className=\"about__content\">\r\n            <ul className=\"about__list\">\r\n                <li><Link to={'{path}/about-app'}>About App</Link></li>\r\n                <li><Link to={'{path}/about-author'}>About Author</Link></li>\r\n            </ul>\r\n            <><Routes><Route path={'${path}/slug'} element={<SinglePage/>}></Route></Routes></>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default About","import react from \"react\";\r\n\r\nconst NotMatch=()=>\r\n{\r\n    return(<div><h3>No match for this page</h3></div>)\r\n\r\n}\r\n\r\nexport default NotMatch","import React, {useState} from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { MdClose } from \"react-icons/md\"\r\nimport { FiMenu } from \"react-icons/fi\"\r\n\r\nconst Navbar=()=>\r\n{\r\n    const links=\r\n    [\r\n        {\r\n            id:1,\r\n            path:\"/\",\r\n            text:\"Home\",\r\n        },\r\n        {\r\n            id:2,\r\n            path:\"/about\",\r\n            text:\"About\",\r\n        },\r\n    ]\r\n\r\n    const[navbarOpen, setNavbarOpen]=useState(false)\r\n\r\n    const handleToogle=()=>\r\n    {\r\n        setNavbarOpen(prev=>!prev)\r\n    }\r\n\r\n    const closeMenu=()=>\r\n    {\r\n        setNavbarOpen(false)\r\n    }\r\n    \r\n    return(\r\n        <nav className=\"navBar\">\r\n            <button onClick={handleToogle}>{navbarOpen?\r\n                (<MdClose style={{ color: \"#fff\", width: \"40px\", height: \"40px\" }}/>):\r\n                (<FiMenu style={{ color: \"#7b7b7b\", width: \"40px\", height: \"40px\" }}/>)}</button>\r\n            <ul className={`menuNav ${navbarOpen?\" showMenu\" :\"\"}`}>\r\n                {\r\n                    links.map(link=>{return(\r\n                    <li key={link.id}>\r\n                        <NavLink to={link.path} onClick={()=>closeMenu()}\r\n                        className={({isActive})=>(isActive?\"activelink\":\"none\")}>{link.text}</NavLink>\r\n                    </li>\r\n                    )})\r\n                }\r\n            </ul>\r\n        </nav>\r\n    )  \r\n    \r\n}/**'const Navbar=()=>' delimiter */\r\n\r\nexport default Navbar","import React from 'react'\r\nimport TodosList from './TodosList';\r\nimport Header from './Header';\r\nimport InputTodo from './InputTodo';\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport { useState, useEffect } from 'react/cjs/react.development';\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport About from '../pages/About';\r\nimport NotMatch from '../pages/NotMatch';\r\nimport Navbar from './Navbar';\r\n\r\nconst TodoContainer=()=>\r\n{\r\n    //const[todos, setTodos]=useState([])\r\n\r\n    // useEffect(()=>\r\n    // {\r\n    //     console.log(\"useeffect has been executed\")\r\n\r\n    //     // getting the stored items\r\n    //     const temp=localStorage.getItem(\"todos\")\r\n    //     const loadedTodos=JSON.parse(temp)\r\n\r\n    //     if(loadedTodos) setTodos(loadedTodos)\r\n    // }, [setTodos]);\r\n\r\n    const[todos, setTodos]=useState(getInitialTodos())\r\n\r\n    function getInitialTodos()\r\n    {\r\n        // this line loads the data from the website in localstorage\r\n        // fetch(\"https://jsonplaceholder.typicode.com/todos?_limit=15\")\r\n        //     .then(Response=>Response.json()).then(data=>setTodos(data));\r\n\r\n        // get the stored items in local storage\r\n        const temp= localStorage.getItem(\"todos\")\r\n        const savedTodos=JSON.parse(temp)\r\n        return savedTodos || [] // return savedtodos or an empty array\r\n    }\r\n\r\n    // we could use multiple calls for useEffect which is when something changes. Usestate works the same way\r\n    // useeffect runs on every render by default\r\n    useEffect(()=>\r\n    {\r\n        // storing todos items\r\n        const temp=JSON.stringify(todos)\r\n        localStorage.setItem(\"todos\", temp)\r\n    }, [todos])\r\n\r\n    const handleChange=(id)=>\r\n    {\r\n        setTodos(prevState => \r\n            prevState.map(todo=>\r\n            {\r\n                if(todo.id===id)\r\n                return{\r\n                    ...todo,\r\n                    completed: !todo.completed,\r\n                }\r\n                return todo\r\n            })\r\n        )\r\n    }\r\n\r\n\r\n    const delTodo=(id)=>\r\n    {\r\n        setTodos([ \r\n            ...todos.filter(todo=>{return todo.id!==id}),\r\n        ])\r\n    }\r\n\r\n    const addTodoItem=(title)=>\r\n    {\r\n        const newTodo=\r\n        {\r\n            id:uuidv4(),\r\n            title:title,\r\n            completed:false\r\n        };\r\n\r\n        setTodos([...todos, newTodo])\r\n    }\r\n\r\n    // event handler that was from TodoList that was raised in TodoItem\r\n    const setUpdate=(updatedTitle, id)=>\r\n    {\r\n        //console.log(updatedTitle, id)\r\n        setTodos(todos.map(todo=>\r\n            {\r\n                if(todo.id===id) todo.title=updatedTitle\r\n                return todo;\r\n            })\r\n        )\r\n    }\r\n\r\n    return(\r\n        // wrapping everything with the react fragment because cannot render multiple jsk\r\n        // similar to wrapping multiple lines in a div\r\n        <>\r\n        <Navbar/>\r\n        <Routes>\r\n        <Route exact path=\"/\" element={\r\n            <div className=\"container\">\r\n                <div className=\"inner\">\r\n                    <Header/>\r\n                    <InputTodo addTodoProps={addTodoItem}/>\r\n                    <TodosList todos={todos} \r\n                    handleChangeProps={handleChange}\r\n                    deleteTodoProps={delTodo}\r\n                    setUpdate={setUpdate} />\r\n                </div>\r\n            </div>\r\n            }>\r\n        </Route>  \r\n        <Route path=\"/about\" element={<About/>}></Route>     \r\n        <Route path=\"*\" element={<NotMatch/>}></Route>\r\n        </Routes>\r\n        </>\r\n    )\r\n\r\n}/**'const TodoContainer=()=>' delimiter */\r\n\r\nexport default TodoContainer\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react'\r\n// import TodosList from './TodosList';\r\n// import Header from './Header';\r\n// import InputTodo from './InputTodo';\r\n// import {v4 as uuidv4} from \"uuid\";\r\n\r\n// class TodoContainer extends React.Component\r\n// {/*\r\n//     This is the state array of objects hardcoded data. \r\n//     Below I modified this to load from actual data\r\n//     state=\r\n//     {\r\n//         todos:\r\n//         [\r\n//             {\r\n//                 id:uuidv4(),\r\n//                 title:\"setup development environment\",\r\n//                 completed: true\r\n//             },\r\n//             {\r\n//                 id:uuidv4(),\r\n//                 title:\"develop website and add content\",\r\n//                 completed: false\r\n//             },\r\n//             {\r\n//                 id:uuidv4(),\r\n//                 title:\"deploy to live server\",\r\n//                 completed: true\r\n//             }\r\n//         ]\r\n//     }; */ \r\n\r\n//     state={todos:[],} // an empty array of objects to push data in\r\n\r\n//     // load the data from the url\r\n//     /* When components get rendered to the DOM, whatever is placed in componentDidMount method gets executed\r\n    \r\n//     N.B. setState is called in this method, so render method will be called twice but this will happen before\r\n//     the browser updates the view*/\r\n//     componentDidMount()\r\n//     {\r\n//         // output to the console\r\n//         // fetch(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\r\n//         //     .then(Response=>Response.json()).then(data=>console.log(data));\r\n\r\n//         // lod to the todos array of objects\r\n//         // fetch(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\r\n//         //     .then(Response=>Response.json()).then(data=>this.setState({todos:data}));\r\n\r\n//         const temp=localStorage.getItem(\"todos\")\r\n//         const loadedTodos=JSON.parse(temp)\r\n//         if(loadedTodos) this.setState({todos:loadedTodos})\r\n\r\n//     }/* 'componentDidMount()' delimiter */\r\n\r\n//     componentDidUpdate(prevProps, prevState)\r\n//     {\r\n//         if(prevState.todos!==this.state.todos)\r\n//         {\r\n//             const temp=JSON.stringify(this.state.todos)\r\n//             localStorage.setItem(\"todos\", temp)\r\n//         }\r\n//     }\r\n\r\n//     handleChange=(id)=>\r\n//     {\r\n//         this.setState(prevState =>({ \r\n//             todos:prevState.todos.map(todo=>\r\n//             {\r\n//                 if(todo.id===id)\r\n//                 return{\r\n//                     ...todo,\r\n//                     completed: !todo.completed,\r\n//                 }\r\n//                 return todo\r\n//             }),\r\n//         }))\r\n//     };\r\n\r\n//     delTodo=(id)=>\r\n//     {\r\n//         this.setState({ \r\n//             todos: \r\n//             [\r\n//                 ...this.state.todos.filter(todo=>{\r\n//                     return todo.id!==id;\r\n//                 })\r\n//             ]\r\n//         });\r\n//     };\r\n\r\n//     addTodoItem=(title)=>\r\n//     {\r\n//         const newTodo=\r\n//         {\r\n//             id:uuidv4(),\r\n//             title:title,\r\n//             completed:false\r\n//         };\r\n\r\n//         this.setState({\r\n//             todos:[...this.state.todos, newTodo]\r\n//         });\r\n//     };\r\n\r\n//     // event handler that was from TodoList that was raised in TodoItem\r\n//     setUpdate=(updatedTitle, id)=>\r\n//     {\r\n//         //console.log(updatedTitle, id)\r\n//         this.setState({\r\n//             todos:this.state.todos.map(todo=>\r\n//             {\r\n//                 if(todo.id===id) todo.title=updatedTitle\r\n//                 return todo;\r\n//             }),\r\n//         })\r\n//     }\r\n\r\n//     render(){\r\n//         return(\r\n//             <div className=\"container\">\r\n//                 <div className=\"inner\">\r\n//                     <Header/>\r\n//                     <InputTodo addTodoProps={this.addTodoItem}/>\r\n//                     <TodosList todos={this.state.todos} \r\n//                     handleChangeProps={this.handleChange}\r\n//                     deleteTodoProps={this.delTodo}\r\n//                     setUpdate={this.setUpdate} />\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }/* 'render()' delimiter */\r\n    \r\n    \r\n// }\r\n\r\n// export default TodoContainer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport TodoContainer from \"./components/TodoContainer\"\n\n// css\nimport \"./App.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter><TodoContainer /></BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}